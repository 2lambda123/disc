#!/usr/bin/env node

var optimist = require('optimist')
var map = require('map-async')
var bl = require('bl')
var open = require('opener')
var path = require('path')
var disc = require('../')
var fs = require('fs')

var argv = optimist
  .usage('$0 [file(s)...] {options}')

  .alias('h', 'help')
  .describe('h', 'Displays these instructions.')

  .alias('o', 'output')
  .describe('o', 'Output path of the bundle. Defaults to stdout.')

  .alias('O', 'open')
  .describe('O', 'Open the file immediately.')

  .argv

if (argv.help) {
  optimist.showHelp()
  return process.exit(1)
}

var files = argv._ || []

files = Array.isArray(files)
  ? files
  : files ? [files] : []

if (!files.length) {
  process.stdin.resume()
  process.stdin.pipe(bl(function(err, data) {
    if (err) throw err
    handle([data])
  }))
} else {
  map(files, function(file, next) {
    fs.readFile(path.resolve(file), next)
  }, function(err, files) {
    handle(files)
  })
}

function handle(files) {
  disc.bundle(files, function(err, html) {
    if (err) throw err
    if (argv.open) return host(html)
    if (argv.output) return fs.writeFileSync(argv.output, html)
    console.log(html)
  })
}

return

disc.bundle({
    files: files
  , transform: argv.transform || []
  , noparse: argv.noparse || []
}, function(err, html) {
  if (err) throw err

  if (argv.open) return host(html)

  if (argv.output) {
    fs.writeFileSync(argv.output, html)
  } else {
    console.log(html)
  }
})

function host(html) {
  return require('http').createServer(function(req, res) {
    res.end(html)
  }).listen(9977, function() {
    console.error('Listening on http://localhost:9977')
    open('http://localhost:9977')
  })
}
